{"version":3,"sources":["components/NewTestCase/TestCaseForm.js","components/NewTestCase/NewTestCase.js","components/UI/Card.js","components/NewTestCase/Explanation.js","components/TestCases/TestCaseItem.js","components/TestCases/TestCases.js","App.js","reportWebVitals.js","index.js"],"names":["TestCaseForm","props","useState","enteredDsTransId","setEnteredDsTransId","enteredCtlNum","setEnteredCtlNum","enteredBackend","setEnteredBackend","onSubmit","event","preventDefault","testcaseData","dsTransId","backendUrl","ctlNum","status","onSaveTestCaseData","className","type","value","onChange","target","min","step","fetchTestResultsHandler","url","ctl","setIsLoading","a","console","log","apiUrl","results","fetch","then","response","json","data","JSON","parse","authCode","catch","error","message","locateFailure","testVerificationResults","failures","count","msgTypes","i","msgType","key","subkey","NewTestCase","isLoading","saveTestCaseDataHandler","enteredTestCaseData","reason","onAddTestCase","Card","classes","children","Explanation","Style","map","fail","TestCaseItem","testcase","TestCases","items","EMPTY","App","testcases","setTestCases","prevTestCases","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7e314e2f.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nimport './TestCaseForm.css';\r\n\r\nconst TestCaseForm = (props) => {\r\n    const [enteredDsTransId, setEnteredDsTransId] = useState('');\r\n    const [enteredCtlNum, setEnteredCtlNum] = useState('');\r\n    const [enteredBackend, setEnteredBackend] = useState('');\r\n\r\n    const dsTransIdChangeHandler = (event) => {\r\n        setEnteredDsTransId(event.target.value);\r\n    };\r\n\r\n    const ctlNumChangeHandler = (event) => {\r\n        setEnteredCtlNum(event.target.value);\r\n    };\r\n\r\n    const backendChangeHandler = (event) => {\r\n        setEnteredBackend(event.target.value);\r\n    };\r\n\r\n    const submitHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        const testcaseData = {\r\n            dsTransId: enteredDsTransId,\r\n            backendUrl: enteredBackend,\r\n            ctlNum: enteredCtlNum,\r\n            status: \"un-verified\"\r\n        };\r\n        props.onSaveTestCaseData(testcaseData);\r\n        setEnteredDsTransId('');\r\n        setEnteredCtlNum(testcaseData.ctlNum);\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={submitHandler}>\r\n            <div className='new-testcase__controls'>\r\n                <div className='new-testcase__control'>\r\n                    <label>Authorization Code</label>\r\n                    <input\r\n                        type='text'\r\n                        value={enteredBackend}\r\n                        onChange={backendChangeHandler}\r\n                    />\r\n                </div>\r\n                <div className='new-testcase__control'>\r\n                    <label>CTL Number</label>\r\n                    <input\r\n                        type='number'\r\n                        min='1'\r\n                        step='1'\r\n\r\n                        value={enteredCtlNum}\r\n                        onChange={ctlNumChangeHandler}\r\n                    />\r\n                </div>\r\n                <div className='new-testcase__control'>\r\n                    <label>DS Transaction ID</label>\r\n                    <input\r\n                        type='text'\r\n                        value={enteredDsTransId}\r\n                        onChange={dsTransIdChangeHandler}\r\n                    />\r\n                </div>\r\n                <div className='new-testcase__control'>\r\n                    <button type='submit'>Verify TestCase</button>\r\n                </div>\r\n            </div>\r\n        </form >\r\n\r\n    );\r\n};\r\n\r\nexport default TestCaseForm;","import React, { useState } from 'react';\r\n\r\nimport TestCaseForm from './TestCaseForm';\r\nimport './NewTestCase.css';\r\n\r\nasync function fetchTestResultsHandler(url, dsTransId, ctl, setIsLoading) {\r\n    setIsLoading(true);\r\n    console.log(\"Just before fetch\");\r\n    const apiUrl = 'http://' + url + '/verify?dstransid=' + dsTransId + '&ctl=' + ctl;\r\n    console.log(apiUrl);\r\n    let results = null;\r\n    await fetch(apiUrl)\r\n        .then((response) => {\r\n            return response.json();\r\n        })\r\n        .then((data) => {\r\n            results = JSON.parse(data);\r\n            //TO DO - utilize all these values in Parents\r\n            results.dsTransId = dsTransId;\r\n            results.ctl = ctl;\r\n            results.authCode = url;\r\n        })\r\n        .catch((error) => {\r\n            console.log(error.message);\r\n            results = null;\r\n        });\r\n    setIsLoading(false);\r\n    return results;\r\n}\r\n\r\nconst locateFailure = (testVerificationResults) => {\r\n    // Read through the Message type for a false\r\n    // return failure string\r\n    let failures = [''];\r\n    let count = 0;\r\n    // TODO - move msgTypes to a constant file - low priority\r\n    const msgTypes = ['AReq', 'ARes', 'RReq', 'RRes', 'Erro'];\r\n    for (let i in msgTypes) {\r\n        let msgType = msgTypes[i];\r\n        for (let key in testVerificationResults) {\r\n            if (key === msgType) {\r\n                for (let subkey in testVerificationResults[msgType]) {\r\n                    if (!testVerificationResults[msgType][subkey]) {\r\n                        failures[count++] = (msgType + \" \" + subkey + \" \");\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return failures;\r\n};\r\n\r\nconst NewTestCase = (props) => {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    const saveTestCaseDataHandler = async (enteredTestCaseData) => {\r\n        let testVerificationResults = await fetchTestResultsHandler(\r\n            enteredTestCaseData.backendUrl, enteredTestCaseData.dsTransId,\r\n            enteredTestCaseData.ctlNum, setIsLoading);\r\n\r\n        if (testVerificationResults) {\r\n            testVerificationResults.ctl = enteredTestCaseData.ctlNum;\r\n            testVerificationResults.dsTransId = enteredTestCaseData.dsTransId;\r\n            console.log(testVerificationResults.status);\r\n            if (testVerificationResults.status === \"Fail\") {\r\n                testVerificationResults.reason = locateFailure(testVerificationResults);\r\n            }\r\n            props.onAddTestCase(testVerificationResults);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className='new-testcase'>\r\n            {!isLoading && < TestCaseForm onSaveTestCaseData={saveTestCaseDataHandler} />}\r\n            {isLoading && <p>Running Verification...</p>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NewTestCase;","import React from 'react';\r\n\r\nimport './Card.css';\r\n\r\nconst Card = (props) => {\r\n    const classes = 'card ' + props.className;\r\n\r\n    return <div className={classes}>{props.children}</div>;\r\n};\r\n\r\nexport default Card;","import React from 'react';\r\n\r\nconst Explanation = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <hr Style=\"height:4px;border-width:0;color:red;background-color:red\"></hr>\r\n            <h2>Reason for Fail status</h2>\r\n            {props.reason.map((fail) =>\r\n                <ul>{fail}</ul>\r\n            )}\r\n            <hr Style=\"height:4px;border-width:0;color:red;background-color:red\"></hr>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Explanation;","import React from 'react';\r\nimport Card from '../UI/Card';\r\nimport Explanation from '../NewTestCase/Explanation';\r\nimport './TestCaseItem.css';\r\n\r\n\r\nconst TestCaseItem = (props) => {\r\n    console.log(props);\r\n    if (props.dsTransId) {\r\n        return (\r\n            <Card className='testcase-item'>\r\n                <div> status = {props.status} </div>\r\n                <div> <h3>testcase = {props.testcase}</h3> </div>\r\n                <div className='testcase-item__description'>\r\n                    <h2>{props.dsTransId}</h2>\r\n                    <h3>{props.ctl}</h3>\r\n                </div>\r\n                <div>\r\n                    {props.reason && <Explanation reason={props.reason} />}\r\n                </div>\r\n            </Card>\r\n        );\r\n    }\r\n    else {\r\n        return <Card></Card>;\r\n    }\r\n\r\n}\r\n\r\nexport default TestCaseItem;","import React from 'react';\r\n\r\nimport TestCaseItem from './TestCaseItem';\r\nimport Card from '../UI/Card';\r\nimport './TestCases.css';\r\n\r\nconst TestCases = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <Card className='testcases'>\r\n                {props.items.map((testcase) => (\r\n                    <TestCaseItem\r\n                        testcase={testcase.testcase}\r\n                        dsTransId={testcase.dsTransId}\r\n                        status={testcase.status}\r\n                        ctlNum={testcase.ctlNum}\r\n                        reason={testcase.reason}\r\n                    />\r\n                ))}\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TestCases;","import React, { useState } from 'react';\nimport NewTestCase from './components/NewTestCase/NewTestCase';\nimport TestCases from './components/TestCases/TestCases';\n\n\nconst EMPTY = [{}];\n\nconst App = () => {\n  const [testcases, setTestCases] = useState(EMPTY);\n\n  const addTestCaseHandler = (testcase) => {\n    console.log(testcase.dsTransId);\n    setTestCases((prevTestCases) => {\n      return [testcase, ...prevTestCases];\n    });\n  };\n\n\n  return (\n    <div>\n      <NewTestCase onAddTestCase={addTestCaseHandler} />\n      {testcases && <TestCases items={testcases} />}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}